using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class World : MonoBehaviour
{
    private int                         _worldSize; // Property taken from WorldProperties. We save it locally to avoid continuous Instance calls
    private int                         _chunkSize; // Property taken from WorldProperties. We save it locally to avoid continuous Instance calls
    private int                         _voxelSize; // Property taken from WorldProperties. We save it locally to avoid continuous Instance calls
    
    private Dictionary<Vector3, Chunk>  _chunks;    // Dictionary holding chunks. Uses their world-space position as key, in order to easily reference them
    
    private HeightMap                   _heightMap; // Holds the map generated by a given noise source. The map acts as the lookup table for voxel elevation

    public int WorldSize                        { get => _worldSize; set => _worldSize = value; }
    public int ChunkSize                        { get => _chunkSize; set => _chunkSize = value; }
    public int VoxelSize                        { get => _voxelSize; set => _voxelSize = value; }
    public Dictionary<Vector3, Chunk> Chunks    { get => _chunks; set => _chunks = value; }
    public HeightMap HeightMap                  { get => _heightMap; set => _heightMap = value; }

    private void Start()
    {
        var properties = WorldProperties.Instance();
        
        if (!properties.IsReady())
        {
            Debug.LogWarning("WorldProperties not loaded after world creation");
            return;
        }

        WorldSize = properties.WorldSize;
        ChunkSize = properties.ChunkSize;
        VoxelSize = properties.VoxelSize;

        Chunks = new Dictionary<Vector3, Chunk>();
    }

}
